@page "/"
@using Lazurdit.UI.Models
@using Lazurdit.UI.Services
@inject ContactService ContactService
@inject IToastService ToastService
@using Blazored.Toast.Configuration;
<table class="table">
    <thead>
    <tr>
        <th>
            <button @onclick="@(() => SortContacts("id"))" class="btn ">
                Id
                <img src="sort-numeric-down-alt.svg" alt=""/>
            </button>
        </th>
        <th>
            <button @onclick="@(() => SortContacts("firstName"))" class="btn ">
                First Name
                <img src="sort-alpha-down.svg" alt="d"/>
            </button>
        </th>
        <th>
            <button @onclick="@(() => SortContacts("lastname"))" class="btn ">
                Last Name
                <img src="sort-alpha-down.svg" alt="d"/>
            </button>
        </th>
        <th>
            <button @onclick="@(() => SortContacts("Email"))" class="btn ">
                Email
                <img src="sort-alpha-down.svg" alt="d"/>
            </button>
        </th>
        <th>
            <button @onclick="@(() => SortContacts("PhoneNumber"))" class="btn ">
                PhoneNumber
                <img src="sort-numeric-down-alt.svg" alt=""/>
            </button>
        </th>
        <th>Action</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var contact in Contacts)
    {
        <tr>
            <td>@contact.Id</td>
            <td>@contact.FirstName</td>
            <td>@contact.LastName</td>
            <td>@contact.Email</td>
            <td>@contact.PhoneNumber</td>
            <td>
                <button class="btn btn-primary" @onclick="() => EditContact(contact)">Edit</button>
                <button class="btn btn-danger" @onclick="() => RemoveContact(contact)">Delete</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@if (IsEditing)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Contact</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    @if (SelectedContact != null)
                    {
                        <form @onsubmit="(() => SaveContact(SelectedContact))">
                            <div class="mb-3">
                                <label for="firstName" class="form-label">First Name</label>
                                <input  type="text" class="form-control" id="firstName"  @bind="@SelectedContact.FirstName" required minlength="3"/>
                            </div>
                            <div class="mb-3">
                                <label for="lastName" class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="lastName" @bind="@SelectedContact.LastName" required minlength="3"/>
                            </div>
                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" @bind="@SelectedContact.Email" required/>
                            </div>
                            <div class="mb-3">
                                <label for="phoneNumber" class="form-label">Phone Number</label>
                                <input type="tel" class="form-control" id="phoneNumber"  @bind="@SelectedContact.PhoneNumber" required minlength="5"/>
                            </div>
                            <button type="submit" class="btn btn-primary" >Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>
}
@if (_showConfirmationDialog)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CancelConfirmation"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this contact?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelConfirmation">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed">Delete</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private Contact SelectedContact { get; set; }
    private Contact SelectedContactRef { get; set; }
    private bool IsEditing { get; set; }
    private IList<Contact> Contacts { get; set; } = new List<Contact>();
    private string _sortOrder = "asc";
    private bool _showConfirmationDialog = false;
    private Contact _contactToDelete;


    protected override async Task OnInitializedAsync()
    {
        Contacts = await ContactService.GetContactsAsync();
    }

    private async Task SortContacts(string sortBy)
    {
        Contacts = await ContactService.GetSorted(sortBy, _sortOrder);
        _sortOrder = _sortOrder == "asc" ? "dec" : "asc";
    }

    private void EditContact(Contact contact)
    {
        SelectedContact = new Contact()
        {
            Id = contact.Id,
            FirstName = contact.FirstName,
            LastName = contact.LastName,
            Email = contact.Email,
            PhoneNumber = contact.PhoneNumber
        };
        SelectedContactRef = contact;
        IsEditing = true;
    }

    private async Task SaveContact(Contact contact)
    {
        var result = await ContactService.UpdateContactAsync(contact);
        if (result)
        {
            ShowToast("Contact Updated", "ok");
            SelectedContactRef.FirstName = contact.FirstName;
            SelectedContactRef.LastName = contact.LastName;
            SelectedContactRef.Email = contact.Email;
            SelectedContactRef.PhoneNumber = contact.PhoneNumber;
            CancelEdit();
        }
        else
            ShowToast("There is something wrong", "error");
    }
   
    private void CancelEdit()
    {
        IsEditing = false;
    }
    private void RemoveContact(Contact contact)
    {
        _contactToDelete = contact;
        _showConfirmationDialog = true;
    }

    private async void DeleteConfirmed()
    {
        var response = await ContactService.DeleteContact(_contactToDelete.Id);
        if (response)
        {
            var deletedContract = Contacts.Single(x => x.Id == _contactToDelete.Id);
            Contacts.Remove(deletedContract);
            ShowToast("Contact Deleted", "ok");
            CancelConfirmation();
        }
        else
            ShowToast("There is and error try again", "error");
        
    }

    private void ShowToast(string message, string status)
    {
        Action<ToastSettings> toastSetting = settings =>
        {
            settings.IconType = IconType.FontAwesome;
            settings.Position = ToastPosition.TopRight;
            settings.ShowProgressBar = true;
            settings.PauseProgressOnHover = true;
            settings.ShowCloseButton = true;
        };

        if (status == "ok")
            ToastService.ShowSuccess(message, toastSetting);
        else
            ToastService.ShowError(message, toastSetting);
    }
    
    private void CancelConfirmation()
    {
        _showConfirmationDialog = false;
        StateHasChanged();
    }
}